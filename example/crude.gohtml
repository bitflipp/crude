// Auto-generated file. Please do not edit manually.

package main

import (
	"database/sql"
)
{{ range . }}
func ({{ .Receiver }} *{{ .Name }}) create(db *sql.DB) (sql.Result, error) {
	sql := `INSERT INTO {{ .Table }} ({{ .Custom | toStrings | .ToColumns | join ", " }}) VALUES ({{ repeat (len .Custom) "?" | join ", " }})`
	return db.Exec(sql, {{ .Custom | toStrings | wrap (print .Receiver ".") "" | join ", " }})
}

func ({{ .Receiver }} *{{ .Name }}) read(db *sql.DB, clauses string, parameters ...interface{}) error {
	sql := `SELECT {{ .Columns | join ", " }} FROM {{ .Table }} ` + clauses
	row := db.QueryRow(sql, parameters...)
	if err := row.Scan({{ .Fields | wrap (print "&" .Receiver ".") "" | join ", " }}); err != nil {
		return err
	}
	return nil
}

func ({{ .Receiver }} *{{ .Name }}) update(db *sql.DB, clauses string, parameters ...interface{}) (sql.Result, error) {
	sql := `UPDATE {{ .Table }} SET {{ zip " = " .Columns (repeat (len .Columns) "?") | join ", " }} ` + clauses
	parameters = append([]interface{}{{ print "{" }}{{ .Fields | wrap (print .Receiver ".") "" | join ", " }}{{ print "}" }}, parameters...)
	return db.Exec(sql, parameters...)
}

func ({{ .Receiver }} *{{ .Name }}) delete(db *sql.DB, clauses string, parameters ...interface{}) (sql.Result, error) {
	sql := `DELETE FROM {{ .Table }} ` + clauses
	return db.Exec(sql, parameters...)
}

type {{ .Name }}Slice []{{ .Name }}

func ({{ .Receiver }} *{{ .Name }}Slice) read(db *sql.DB, clauses string, parameters ...interface{}) error {
	sql := `SELECT {{ .Columns | join ", " }} FROM {{ .Table }} ` + clauses
	rows, err := db.Query(sql, parameters...)
	if err != nil {
		return err
	}
	for rows.Next() {
		entity := {{ .Name }}{}
		if err := rows.Scan({{ .Fields | wrap "&entity." "" | join ", " }}); err != nil {
			return err
		}
		*{{ .Receiver }} = append(*{{ .Receiver }}, entity)
	}
	return nil
}
{{ end }}